// === DEPENDENCIAS ===
const express = require('express');
const bodyParser = require('body-parser');
const { WebhookClient } = require('dialogflow-fulfillment');
const app = express();

process.env.DEBUG = 'dialogflow:debug';
const port = process.env.PORT || 3000;
app.use(bodyParser.json());

// === VARIABLES GLOBALES ===
let respuestasDepresion = [];
let datosAlumno = { nombre: null, edad: null, celular_apoderado: null };

// === INTERPRETACI√ìN DE RESULTADO ===
function interpretarDepresion(p) {
  if (p <= 4) return "m√≠nima o nula";
  if (p <= 9) return "leve";
  if (p <= 14) return "moderada";
  if (p <= 19) return "moderadamente severa";
  return "severa";
}

// === INICIO_DIAGNOSTICO ===
function inicioDiagnostico(agent) {
  try {
    // Reiniciar todo
    respuestasDepresion = [];
    datosAlumno = { nombre: null, edad: null, celular_apoderado: null };

    // Limpiar contextos anteriores
    agent.clearOutgoingContexts();

    // Crear contexto nuevo para recolectar los datos
    agent.setContext({
      name: 'contexto_datos_alumno',
      lifespan: 5,
      parameters: {}
    });

    agent.add("üìù Iniciemos con tus datos. ¬øCu√°l es tu *nombre*?");
    console.log("üü¢ inicioDiagnostico llamado");
  } catch (error) {
    console.error("‚ùå Error en inicioDiagnostico:", error);
    agent.add("Ocurri√≥ un problema al iniciar el diagn√≥stico.");
  }
}

// === RECOLECCI√ìN DE DATOS (nombre, edad, celular) ===
function recolectarDatos(agent) {
  const context = agent.getContext('contexto_datos_alumno');
  const input = agent.query;

  if (!context.parameters.nombre) {
    context.parameters.nombre = input;
    agent.setContext({ ...context, lifespan: 5 });
    agent.add("üìÖ Gracias. Ahora dime, ¬øcu√°ntos a√±os tienes?");
    return;
  }

  if (!context.parameters.edad) {
    const edad = parseInt(input);
    if (isNaN(edad)) {
      agent.add("‚ö†Ô∏è Por favor, indica tu edad como n√∫mero.");
      return;
    }
    context.parameters.edad = edad;
    agent.setContext({ ...context, lifespan: 5 });
    agent.add("üì± Gracias. Finalmente, ¬øcu√°l es el n√∫mero de celular de tu apoderado?");
    return;
  }

  if (!context.parameters.celular_apoderado) {
    context.parameters.celular_apoderado = input;
    agent.setContext({ ...context, lifespan: 50 });

    const { nombre, edad, celular_apoderado } = context.parameters;
    datosAlumno = { nombre, edad, celular_apoderado };

    agent.add(`‚úÖ Datos registrados:
‚Ä¢ Nombre: ${nombre}
‚Ä¢ Edad: ${edad}
‚Ä¢ Celular apoderado: ${celular_apoderado}`);

    agent.add("¬øDeseas iniciar la evaluaci√≥n de *depresi√≥n* (PHQ-9)? (Responde: s√≠ / no)");

    agent.setContext({
      name: 'contexto_depresion_inicio',
      lifespan: 5
    });

    agent.setContext({
      name: 'contexto_pregunta_depresion',
      lifespan: 5,
      parameters: { index: 0 }
    });

    return;
  }

  agent.add("‚ùå Hubo un error al registrar tus datos. Intenta de nuevo.");
}

// === BLOQUE DEPRESI√ìN ===
const preguntasDepresion = [
  "¬øPoco inter√©s o placer en hacer cosas?",
  "¬øTe has sentido deca√≠do, deprimido o sin esperanza?",
  "¬øDificultad para quedarte dormido, o dormir demasiado?",
  "¬øTe has sentido cansado o con poca energ√≠a?",
  "¬øPoca autoestima, o te has sentido in√∫til o fracasado?",
  "¬øDificultad para concentrarte en cosas como leer o ver televisi√≥n?",
  "¬øTe has movido o hablado tan lento que otras personas lo notaron?",
  "¬øHas tenido pensamientos de que estar√≠as mejor muerto o de hacerte da√±o?",
  "¬øQu√© tan dif√≠cil han hecho estos problemas tu vida diaria?"
];

function bloqueDepresion(agent) {
  try {
    const context = agent.getContext('contexto_pregunta_depresion');
    let index = context?.parameters?.index || 0;
    const respuesta = parseInt(agent.query);

    if (isNaN(respuesta) || respuesta < 0 || respuesta > 3) {
      agent.add("‚ö†Ô∏è Por favor, responde con un n√∫mero entre 0 y 3.");
      return;
    }

    respuestasDepresion.push(respuesta);

    if (index < preguntasDepresion.length - 1) {
      index += 1;
      agent.setContext({
        name: 'contexto_pregunta_depresion',
        lifespan: 10,
        parameters: { index }
      });

      agent.add(`üß† *Pregunta ${index + 1}*:\n${preguntasDepresion[index]}\n\n(0 = Nada en absoluto, 1 = Varios d√≠as, 2 = M√°s de la mitad de los d√≠as, 3 = Casi todos los d√≠as)`);
    } else {
      const total = respuestasDepresion.reduce((a, b) => a + b, 0);
      const nivel = interpretarDepresion(total);

      const { nombre, edad, celular_apoderado } = datosAlumno;

      agent.add(`‚úÖ *Resultado del test PHQ-9:*
üë§ Nombre: ${nombre}
üéÇ Edad: ${edad}
üìû Apoderado: ${celular_apoderado}
üìä Puntaje: *${total}*
üß† Nivel de depresi√≥n: *${nivel}*`);

      agent.add("¬øDeseas continuar con el siguiente bloque (ansiedad)? (Responde: s√≠ / no)");
    }
  } catch (error) {
    console.error("‚ùå Error en bloqueDepresion:", error);
    agent.add("Hubo un error durante la evaluaci√≥n de depresi√≥n.");
  }
}

// === MAPEO DE INTENTS ===
app.post('/webhook', (req, res) => {
  const agent = new WebhookClient({ request: req, response: res });
  console.log('üì© Webhook recibido');

  const intentMap = new Map();
  intentMap.set('inicio_diagnostico', inicioDiagnostico);
  intentMap.set('recolectar_datos_alumno', recolectarDatos);
  intentMap.set('bloque_depresion', bloqueDepresion);

  agent.handleRequest(intentMap);
});

// === INICIAR SERVIDOR ===
app.listen(port, () => {
  console.log(`üöÄ Servidor corriendo en el puerto ${port}`);
});

















