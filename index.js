// === DEPENDENCIAS ===
const express = require('express');
const bodyParser = require('body-parser');
const { WebhookClient } = require('dialogflow-fulfillment');
const app = express();

process.env.DEBUG = 'dialogflow:debug';
const port = process.env.PORT || 3000;
app.use(bodyParser.json());

// === VARIABLES GLOBALES ===
let respuestasDepresion = [];

// === INTERPRETACI√ìN ===
function interpretarDepresion(p) {
  if (p <= 4) return "m√≠nima o nula";
  if (p <= 9) return "leve";
  if (p <= 14) return "moderada";
  if (p <= 19) return "moderadamente severa";
  return "severa";
}

// === INICIO DIAGN√ìSTICO ===
function inicioDiagnostico(agent) {
  try {
    // Limpiar todo al iniciar
    respuestasDepresion = [];

    // Limpiar contextos antiguos
    agent.clearOutgoingContexts();

    agent.setContext({
      name: 'contexto_datos_alumno_solicitud',
      lifespan: 5
    });

    agent.add("Vamos a iniciar el diagn√≥stico. Primero necesito algunos datos.");
    agent.add("¬øCu√°l es tu nombre?");
  } catch (error) {
    console.error("‚ùå Error en inicioDiagnostico:", error);
    agent.add("Ocurri√≥ un error al iniciar. Intenta nuevamente.");
  }
}

// === RECOLECTAR DATOS ALUMNO ===
function recolectarDatosAlumno(agent) {
  try {
    const { nombre, edad, celular_apoderado } = agent.parameters || {};

    agent.setContext({
      name: 'contexto_datos_alumno',
      lifespan: 50,
      parameters: { nombre, edad, celular_apoderado }
    });

    // Iniciar √≠ndice de preguntas
    respuestasDepresion = [];
    agent.setContext({
      name: 'contexto_pregunta_depresion',
      lifespan: 10,
      parameters: { index: 0 }
    });

    // Activar bloque_depresion
    agent.setContext({
      name: 'contexto_depresion_inicio',
      lifespan: 5
    });

    agent.add(`‚úÖ Datos registrados:
‚Ä¢ Nombre: ${nombre}
‚Ä¢ Edad: ${edad}
‚Ä¢ Celular del apoderado: ${celular_apoderado}

Iniciemos con la evaluaci√≥n de depresi√≥n.`);

    agent.add("üß† *Evaluaci√≥n de Depresi√≥n (PHQ-9)*\n\nPRIMERA PREGUNTA:\n¬øPoco inter√©s o placer en hacer cosas?\n(Responde con un n√∫mero del 0 al 3)\n\n0 = Nada en absoluto\n1 = Varios d√≠as\n2 = M√°s de la mitad de los d√≠as\n3 = Casi todos los d√≠as");
  } catch (error) {
    console.error("‚ùå Error en recolectarDatosAlumno:", error);
    agent.add("Ocurri√≥ un error al registrar tus datos. Intenta nuevamente.");
  }
}

// === PREGUNTAS PHQ-9 ===
const preguntasDepresion = [
  "¬øPoco inter√©s o placer en hacer cosas?",
  "¬øTe has sentido deca√≠do, deprimido o sin esperanza?",
  "¬øDificultad para quedarte dormido, o dormir demasiado?",
  "¬øTe has sentido cansado o con poca energ√≠a?",
  "¬øPoca autoestima, o te has sentido in√∫til o fracasado?",
  "¬øDificultad para concentrarte en cosas como leer o ver televisi√≥n?",
  "¬øTe has movido o hablado tan lento que otras personas lo notaron?",
  "¬øHas tenido pensamientos de que estar√≠as mejor muerto o de hacerte da√±o?",
  "¬øQu√© tan dif√≠cil han hecho estos problemas tu vida diaria?"
];

// === BLOQUE DEPRESI√ìN ===
function bloqueDepresion(agent) {
  try {
    const context = agent.getContext('contexto_pregunta_depresion');
    let index = context?.parameters?.index || 0;
    const respuesta = parseInt(agent.query);

    if (isNaN(respuesta) || respuesta < 0 || respuesta > 3) {
      agent.add("‚ö†Ô∏è Por favor, responde con un n√∫mero del 0 al 3.");
      return;
    }

    respuestasDepresion.push(respuesta);

    if (index < preguntasDepresion.length - 1) {
      index += 1;
      agent.setContext({
        name: 'contexto_pregunta_depresion',
        lifespan: 10,
        parameters: { index }
      });

      const nuevaPregunta = preguntasDepresion[index];
      agent.add(`\n${nuevaPregunta}\n(Responde con un n√∫mero del 0 al 3)`);
    } else {
      const total = respuestasDepresion.reduce((a, b) => a + b, 0);
      const nivel = interpretarDepresion(total);

      const alumno = agent.getContext('contexto_datos_alumno')?.parameters || {};
      const nombre = alumno.nombre || 'Alumno';
      const edad = alumno.edad || 'N/D';
      const celular = alumno.celular_apoderado || 'N/D';

      agent.add(`‚úÖ *Resultado del test PHQ-9:*\nüë§ Nombre: ${nombre}\nüéÇ Edad: ${edad}\nüìû Apoderado: ${celular}\nüìä Puntaje: *${total}*\nüß† Nivel de depresi√≥n: *${nivel}*`);

      agent.setContext({
        name: 'contexto_depresion',
        lifespan: 10,
        parameters: { total }
      });

      agent.add("¬øDeseas continuar con el siguiente bloque (ansiedad)? (Responde: s√≠ / no)");
      agent.setContext({
        name: 'contexto_ansiedad_inicio',
        lifespan: 5
      });
    }
  } catch (error) {
    console.error("‚ùå Error en bloqueDepresion:", error);
    agent.add("Ocurri√≥ un error durante la evaluaci√≥n. Intenta nuevamente.");
  }
}

// === INTENT MAP ===
app.post('/webhook', (req, res) => {
  const agent = new WebhookClient({ request: req, response: res });
  console.log('‚úÖ Webhook recibido');

  if (!agent.requestSource) {
    agent.requestSource = 'PLATFORM_UNSPECIFIED';
  }

  const intentMap = new Map();
  intentMap.set('inicio_diagnostico', inicioDiagnostico);
  intentMap.set('recolectar_datos_alumno', recolectarDatosAlumno);
  intentMap.set('bloque_depresion', bloqueDepresion);

  agent.handleRequest(intentMap);
});

// === INICIO SERVIDOR ===
app.listen(port, () => {
  console.log(`üöÄ Servidor corriendo en el puerto ${port}`);
});

















